// src/providers/jsonrpc.ts
import { RpcProvider as RpcProvider2 } from "starknet";

// src/context/starknet.tsx
import { goerli, mainnet } from "@starknet-react/chains";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import {
  createContext,
  useCallback,
  useContext as useContext2,
  useEffect,
  useRef,
  useState
} from "react";
import {
  constants
} from "starknet";

// src/context/account.tsx
import React, { useContext } from "react";
import { jsx } from "react/jsx-runtime";
var AccountContext = React.createContext(
  void 0
);

// src/context/starknet.tsx
import { jsx as jsx2 } from "react/jsx-runtime";
var StarknetContext = createContext(void 0);
function starknetChainId(chainId) {
  switch (chainId) {
    case mainnet.id:
      return constants.StarknetChainId.SN_MAIN;
    case goerli.id:
      return constants.StarknetChainId.SN_GOERLI;
    default:
      return void 0;
  }
}

// src/context/index.tsx
import { jsx as jsx3 } from "react/jsx-runtime";

// src/providers/jsonrpc.ts
function jsonRpcProvider({
  rpc
}) {
  return function(chain) {
    const config = rpc(chain);
    if (!config)
      return null;
    const chainId = starknetChainId(chain.id);
    const provider = new RpcProvider2({ ...config, chainId });
    return provider;
  };
}

// src/providers/public.ts
function publicProvider() {
  return jsonRpcProvider({
    rpc: (chain) => {
      const nodeUrl = chain.rpcUrls.public.http[0];
      if (!nodeUrl)
        return null;
      return { nodeUrl };
    }
  });
}

// src/providers/alchemy.ts
function alchemyProvider({ apiKey }) {
  return jsonRpcProvider({
    rpc: (chain) => {
      const baseHttpUrl = chain.rpcUrls["alchemy"]?.http[0];
      if (!baseHttpUrl)
        return null;
      const nodeUrl = `${baseHttpUrl}/${apiKey}`;
      return { nodeUrl };
    }
  });
}

// src/providers/infura.ts
function infuraProvider({ apiKey }) {
  return jsonRpcProvider({
    rpc: (chain) => {
      const baseHttpUrl = chain.rpcUrls["infura"]?.http[0];
      if (!baseHttpUrl)
        return null;
      const nodeUrl = `${baseHttpUrl}/${apiKey}`;
      return { nodeUrl };
    }
  });
}

// src/providers/lava.ts
function lavaProvider({ apiKey }) {
  return jsonRpcProvider({
    rpc: (chain) => {
      const baseHttpUrl = chain.rpcUrls["lava"]?.http[0];
      if (!baseHttpUrl)
        return null;
      const nodeUrl = `${baseHttpUrl}/${apiKey}`;
      return { nodeUrl };
    }
  });
}
export {
  alchemyProvider,
  infuraProvider,
  jsonRpcProvider,
  lavaProvider,
  publicProvider
};
//# sourceMappingURL=index.js.map